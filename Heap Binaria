/*
troca <= falso
enquanto falso faça
	i<= 0
	troca <= verdadeiro
	enquanto i < nElem faça
		k<= 2xi+1
		j<=2xi+2
		se vetor[i] < vetor[k] ou vetor[j]
			troca <= falso
			se vetor[j] > vetor[i]
				aux[-1] <= vetor[j]
				vetor[j] <= vetor[i]
				vetor[i] <= aux[-1]
			fim se
			se vetor[k] > vetor[i]
				aux[-1] <= vetor[k]
				vetor[k] <= vetor[i]
				vetor[i] <= aux[-1]
			fim se
		fim se
		i <= i+1
	fim enquanto
fim enquanto



*/
#include <iostream>
#define MAX 500
using namespace std;
typedef struct Cliente {
	int numero = -1;
}Cliente;
typedef struct Lista {
	Cliente vetor[MAX];
	int nElem;
}Lista;
struct Lista* aux;
struct Cliente c;
void Criar(Lista* lista) {
	lista->nElem = 0;
}
void Ordena(Lista* lista, int tam);
void Inserir(Lista* lista, Cliente cl) {

	lista->vetor[lista->nElem] = cl;
	lista->nElem = lista->nElem + 1;
	
	
	int tam = lista->nElem / 2;
	
	Ordena(lista,tam);
}
void Ordena(Lista *lista, int tam) {
	Lista* aux = lista;
	if (lista->nElem == 2)
	{
		
		if (lista->vetor[0].numero < lista->vetor[1].numero)
		{
			
			aux->vetor[-1] = lista->vetor[1];
			lista->vetor[1] = lista->vetor[0];
			lista->vetor[0] = aux->vetor[-1];	
		}
	}

	if (lista->nElem == 3)
	{
		if (lista->vetor[0].numero < lista->vetor[2].numero)
		{
			aux->vetor[-1] = lista->vetor[2];
			lista->vetor[2] = lista->vetor[0];
			lista->vetor[0] = aux->vetor[-1];
		}
	}
	else if(lista->nElem >= 4){
		bool troca = true;
		while (troca)
		{
			troca = false;
			for (int i = 0; i < tam; i++)
			{
				if ((lista->vetor[i].numero < lista->vetor[2 * i + 1].numero) ||
					(lista->vetor[i].numero < lista->vetor[2 * i + 2].numero))
				{
					troca = true;
					if (lista->vetor[i].numero < lista->vetor[2 * i + 1].numero)
					{
						aux->vetor[-1] = lista->vetor[2 * i + 1];
						lista->vetor[2 * i + 1] = lista->vetor[i];
						lista->vetor[i] = aux->vetor[-1];
					}
					if (lista->vetor[i].numero < lista->vetor[2 * i + 2].numero)
					{
						aux->vetor[-1] = lista->vetor[2 * i + 2];
						lista->vetor[2 * i + 2] = lista->vetor[i];
						lista->vetor[i] = aux->vetor[-1];
					}
				}
			}

		}


	}

}

void Listar(Lista *lista) {
	Cliente cl;
	Lista* aux = lista;
	
	for (int i = 0; i < lista->nElem; i++)
	{
		cl = lista->vetor[i];
		cout << "posicao " << i << "  Valor: " << cl.numero << endl;
		//cout << "Valor aux: " << aux->vetor[i].numero << endl;
	}
	
}
void Retirar(Lista* lista) {

	lista->vetor[0] = lista->vetor[lista->nElem - 1];
	lista->nElem = lista->nElem - 1;
	int tam = lista->nElem / 2;
	Ordena(lista, tam);

}



int main()
{
	int op = 1;
	Lista lista;
	Cliente cl;
	while (op != 0)
	{
		cout << "1 - Criar Lista" << endl;
		cout << "2 - Inserir Na Lista" << endl;
		cout << "3 - Listar" << endl;
		cout << "4 - Retirar da Heap" << endl;
		cout << "Operacao: ";
		cin >> op;
		switch (op)
		{
		case 1:
			Criar(&lista);
			break;
		case 2:
			cout << "Numero: ";
			cin >> cl.numero;
			Inserir(&lista, cl);
			break;
		case 3:
			Listar(&lista);
			break;
		case 4:
			Retirar(&lista);
			break;
		}
		
	}





	return NULL;
}
 


